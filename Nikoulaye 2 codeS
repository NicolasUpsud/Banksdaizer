# PREMIER CODE



# -*- coding: utf-8 -*-
"""Reconnaissance digits Nicolas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u1IHbJofQ50b_chxxLezaBZBiyEgxLJJ
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("input/data", one_hot=True)


# Graph Inputs
tf_features = tf.placeholder(tf.float32, [None, 784])
tf_targets = tf.placeholder(tf.float32, [None, 10])

# Variables
w1 = tf.Variable(tf.random_normal([784, 10]))
b1 = tf.Variable(tf.zeros([10]))

#  Operations
z1 = tf.matmul(tf_features, w1) + b1
softmax = tf.nn.softmax(z1)

# Error + Train
error = tf.nn.softmax_cross_entropy_with_logits(labels=tf_targets, logits=z1)
train = tf.train.GradientDescentOptimizer(0.5).minimize(error)

# Metrics: Accuracy
correct_prediction = tf.equal(tf.argmax(softmax, 1), tf.argmax(tf_targets, 1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

print(mnist.train.labels[0])

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    # Train the model
    epochs = 1000
    for e in range(epochs):
        batch_features, batch_targets = mnist.train.next_batch(100)
        sess.run(train, feed_dict={tf_features: batch_features, tf_targets: batch_targets})

    true_cls = []
    py_cls = []
    # Print the prediction for the first 10 predictions
    for c in range(0, 20):
        py = sess.run(softmax, feed_dict={
            tf_features: [mnist.test.images[c]]
        })
        true_cls.append(np.argmax(mnist.test.labels[c]))
        py_cls.append(np.argmax(py))
    print("true_cls", true_cls)
    print("py cls", py_cls)

    # Accuracy on the test set
    acc = sess.run(accuracy, feed_dict={
        tf_features: mnist.test.images,
        tf_targets:  mnist.test.labels
    })
    print("Accuracy on the test set", acc)



# DEUXIEME CODE




# this is the code from https://github.com/keras-team/keras/blob/master/examples/mnist_cnn.py
from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K

batch_size = 128
num_classes = 10
epochs = 1

# input image dimensions
img_rows, img_cols = 28, 28

# the data, split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=keras.optimizers.Adadelta(),
              metrics=['accuracy'])

model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

import shap
import numpy as np

# select a set of background examples to take an expectation over
background = x_train[np.random.choice(x_train.shape[0], 100, replace=False)]

# explain predictions of the model on three images
e = shap.DeepExplainer(model, background)
# ...or pass tensors directly
# e = shap.DeepExplainer((model.layers[0].input, model.layers[-1].output), background)
shap_values = e.shap_values(x_test[1:5])


# plot the feature attributions
shap.image_plot(shap_values, -x_test[1:5])
